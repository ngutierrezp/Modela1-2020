%################################################
%#                  Primera Parte               #
%################################################


 f1 = @(x)  8 * ( log(4*x + 12) / log(5) ) ;
    
 f2 = @(x) sin(6*( log(x + 9) / log(2) )) + cos(7*(log(4*x + 32) / log(6))) ;
    
 types = [ "r *" , "g +"] ;
   
 vector = (0:0.01:15*pi);
    
 titles = [ "8log_5(4x + 12)" , "sen(6(log_2(x + 9))) + cos(7(log_6(4x + 32)))"];
    
 plotFunctions(f1,f2,vector,types,titles)


%################################################
%#                  Segunda Parte               #
%################################################


f_1_2 = @(x) 6* exp(x + 18); 
interval = [-10, 10];
f_1_2_title = '6e^(^x^+^1^8^)';

print_scales(f_1_2, f_1_2_title, interval)


% Ecuaciones de prueba

f = @(x) x.^3 - 4*x.^2 + 6*x - 24;
f2 = @(x) x.^3 - 7*x.^2 + 14*x - 2;

disp("Ingresa una función como polinomio, cada numero debe ir separado por espacio")
textVector = input('ingresa un vector: ','s');
lengthUserVector = length(split(textVector,' '));

str = textscan( textVector, '%s', 'Delimiter',' ' ); % get scan only numbers
str = permute( num{1}, [2,1] ); % convert to vector
num = textscan( textVector, '%n', 'Delimiter','\t' ); % get scan only numbers
num = permute( num{1}, [2,1] ); % convert to vector
poly = num(~isnan(num)) % remove nan values

 if length(str) > length(poly)
        disp("Por favor ingrese un vector numerico valido separado por espacios")
 else
     bool = false;
 end
tol = 1e-7;
x_0 = 7;

res = Newton(poly, x_0, tol, 20)

plotNewton(poly, x_0, res, "test")

sprintf("The solution is: %f", res);